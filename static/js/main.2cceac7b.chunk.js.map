{"version":3,"sources":["components/Sidebar.js","components/Editor.js","data.js","App.js","index.js"],"names":["Sidebar","props","noteElements","notes","map","note","index","className","id","currentNote","onClick","setCurrentNoteId","body","split","event","deleteNote","newNote","Editor","updateNote","React","useState","selectedTab","setSelectedTab","converter","Showdown","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","value","onChange","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","minEditorHeight","heightUnits","App","JSON","parse","localStorage","getItem","setNotes","currentNoteId","createNewNote","nanoid","prevNotes","findCurrentNote","find","useEffect","setItem","stringify","length","sizes","direction","noteId","stopPropagation","oldNotes","filter","text","newArray","i","oldNote","unshift","push","ReactDOM","render","document","getElementById"],"mappings":"wOAGe,SAASA,EAAQC,GAC9B,IAAMC,EAAeD,EAAME,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACnC,8BACE,sBACEC,UAAS,gBACPF,EAAKG,KAAOP,EAAMQ,YAAYD,GAAK,gBAAkB,IAEvDE,QAAS,kBAAMT,EAAMU,iBAAiBN,EAAKG,KAJ7C,UAME,oBAAID,UAAU,eAAd,SAA8BF,EAAKO,KAAKC,MAAM,MAAM,KACpD,wBACEN,UAAU,aACVG,QAAS,SAACI,GAAD,OAAWb,EAAMc,WAAWD,EAAOT,EAAKG,KAFnD,SAIE,cAAC,IAAD,CAAUD,UAAU,qBAZhBF,EAAKG,OAkBjB,OACE,0BAASD,UAAU,eAAnB,UACE,sBAAKA,UAAU,kBAAf,UACE,uCACA,wBAAQA,UAAU,WAAWG,QAAST,EAAMe,QAA5C,kBAIDd,K,4CC1BQ,SAASe,EAAT,GAA8C,IAA5BR,EAA2B,EAA3BA,YAAaS,EAAc,EAAdA,WAC5C,EAAsCC,IAAMC,SAAS,SAArD,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAY,IAAIC,IAASC,UAAU,CACvCC,QAAQ,EACRC,oBAAoB,EACpBC,eAAe,EACfC,WAAW,IAGb,OACE,yBAAStB,UAAU,cAAnB,SACE,cAAC,IAAD,CACEuB,MAAOrB,EAAYG,KACnBmB,SAAUb,EACVG,YAAaA,EACbW,YAAaV,EACbW,wBAAyB,SAACC,GAAD,OACvBC,QAAQC,QAAQb,EAAUc,SAASH,KAErCI,gBAAiB,GACjBC,YAAY,SC1Bb,I,gBCOQ,SAASC,IACtB,MAA0BrB,IAAMC,UAC9B,kBAAMqB,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,MADrD,mBAAOzC,EAAP,KAAc0C,EAAd,KAGA,EAA0C1B,IAAMC,SAC7CjB,EAAM,IAAMA,EAAM,GAAGK,IAAO,IAD/B,mBAAOsC,EAAP,KAAsBnC,EAAtB,KAQA,SAASoC,IACP,IAAM/B,EAAU,CACdR,GAAIwC,cACJpC,KAAM,0CAERiC,GAAS,SAACI,GAAD,OAAgBjC,GAAhB,mBAA4BiC,OACrCtC,EAAiBK,EAAQR,IAkB3B,SAAS0C,IACP,OACE/C,EAAMgD,MAAK,SAAC9C,GACV,OAAOA,EAAKG,KAAOsC,MACf3C,EAAM,GAShB,OAzCAiD,qBAAU,WACRT,aAAaU,QAAQ,QAASZ,KAAKa,UAAUnD,MAC5C,CAACA,IAwCF,+BACGA,EAAMoD,OAAS,EACd,eAAC,IAAD,CAAOC,MAAO,CAAC,GAAI,IAAKC,UAAU,aAAalD,UAAU,QAAzD,UACE,cAACP,EAAD,CACEG,MAAOA,EACPM,YAAayC,IACbvC,iBAAkBA,EAClBK,QAAS+B,EACThC,WAdV,SAAoBD,EAAO4C,GACzB5C,EAAM6C,kBACNd,GAAS,SAACe,GAAD,OAAcA,EAASC,QAAO,SAACxD,GAAD,OAAUA,EAAKG,KAAOkD,WActDZ,GAAiB3C,EAAMoD,OAAS,GAC/B,cAACtC,EAAD,CAAQR,YAAayC,IAAmBhC,WAxClD,SAAoB4C,GAClBjB,GAAS,SAACe,GAER,IADA,IAAMG,EAAW,GACRC,EAAI,EAAGA,EAAIJ,EAASL,OAAQS,IAAK,CACxC,IAAMC,EAAUL,EAASI,GACrBC,EAAQzD,KAAOsC,EACjBiB,EAASG,QAAT,2BAAsBD,GAAtB,IAA+BrD,KAAMkD,KAErCC,EAASI,KAAKF,GAGlB,OAAOF,WAiCL,sBAAKxD,UAAU,WAAf,UACE,mDACA,wBAAQA,UAAU,aAAaG,QAASqC,EAAxC,iCCrEVqB,IAASC,OAAO,cAAC7B,EAAD,IAAS8B,SAASC,eAAe,W","file":"static/js/main.2cceac7b.chunk.js","sourcesContent":["import React from \"react\";\nimport { MdDelete } from \"react-icons/md\";\n\nexport default function Sidebar(props) {\n  const noteElements = props.notes.map((note, index) => (\n    <div key={note.id}>\n      <div\n        className={`title ${\n          note.id === props.currentNote.id ? \"selected-note\" : \"\"\n        }`}\n        onClick={() => props.setCurrentNoteId(note.id)}\n      >\n        <h4 className=\"text-snippet\">{note.body.split(\"\\n\")[0]}</h4>\n        <button\n          className=\"delete-btn\"\n          onClick={(event) => props.deleteNote(event, note.id)}\n        >\n          <MdDelete className=\"trash-icon\" />\n        </button>\n      </div>\n    </div>\n  ));\n\n  return (\n    <section className=\"pane sidebar\">\n      <div className=\"sidebar--header\">\n        <h3>Notes</h3>\n        <button className=\"new-note\" onClick={props.newNote}>\n          +\n        </button>\n      </div>\n      {noteElements}\n    </section>\n  );\n}\n","import React from \"react\";\nimport ReactMde from \"react-mde\";\nimport Showdown from \"showdown\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nexport default function Editor({ currentNote, updateNote }) {\n  const [selectedTab, setSelectedTab] = React.useState(\"write\");\n\n  const converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true,\n  });\n\n  return (\n    <section className=\"pane editor\">\n      <ReactMde\n        value={currentNote.body}\n        onChange={updateNote}\n        selectedTab={selectedTab}\n        onTabChange={setSelectedTab}\n        generateMarkdownPreview={(markdown) =>\n          Promise.resolve(converter.makeHtml(markdown))\n        }\n        minEditorHeight={80}\n        heightUnits=\"vh\"\n      />\n    </section>\n  );\n}\n","export const data = [\n  {\n    id: 1,\n    body: `### This just in!\n\nMarkdown is an *awesome* way to write **very basic HTML** by typing manually\n\nIt can be used for:\n\n1. README files\n1. Slack and Discord messages\n1. **So much more!**\n\n---\n\nHere's a division ðŸ‘†`,\n  },\n  { id: 2, body: `a` },\n  { id: 3, body: `b` },\n  { id: 4, body: `c` },\n  { id: 5, body: `d` },\n  { id: 6, body: `e` },\n];\n","import React, { useEffect } from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport { data } from \"./data\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\n\nexport default function App() {\n  const [notes, setNotes] = React.useState(\n    () => JSON.parse(localStorage.getItem(\"notes\")) || []\n  );\n  const [currentNoteId, setCurrentNoteId] = React.useState(\n    (notes[0] && notes[0].id) || \"\"\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown note's title here\",\n    };\n    setNotes((prevNotes) => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n\n  function updateNote(text) {\n    setNotes((oldNotes) => {\n      const newArray = [];\n      for (let i = 0; i < oldNotes.length; i++) {\n        const oldNote = oldNotes[i];\n        if (oldNote.id === currentNoteId) {\n          newArray.unshift({ ...oldNote, body: text });\n        } else {\n          newArray.push(oldNote);\n        }\n      }\n      return newArray;\n    });\n  }\n\n  function findCurrentNote() {\n    return (\n      notes.find((note) => {\n        return note.id === currentNoteId;\n      }) || notes[0]\n    );\n  }\n\n  function deleteNote(event, noteId) {\n    event.stopPropagation();\n    setNotes((oldNotes) => oldNotes.filter((note) => note.id !== noteId));\n  }\n\n  return (\n    <main>\n      {notes.length > 0 ? (\n        <Split sizes={[30, 70]} direction=\"horizontal\" className=\"split\">\n          <Sidebar\n            notes={notes}\n            currentNote={findCurrentNote()}\n            setCurrentNoteId={setCurrentNoteId}\n            newNote={createNewNote}\n            deleteNote={deleteNote}\n          />\n          {currentNoteId && notes.length > 0 && (\n            <Editor currentNote={findCurrentNote()} updateNote={updateNote} />\n          )}\n        </Split>\n      ) : (\n        <div className=\"no-notes\">\n          <h1>You have no notes</h1>\n          <button className=\"first-note\" onClick={createNewNote}>\n            Create one now\n          </button>\n        </div>\n      )}\n    </main>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}